/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package extendible_hasing;
import java.lang.*;
import java.io.*; 
import java.util.*;
import javax.swing.JOptionPane;

/**
 *
 * @author viraj
 */
public class Driver extends javax.swing.JFrame {
    
    static ArrayList<DirectoryField> directory;
    int key;
    static int GD;
    /**
     * Creates new form Driver
     */
    public Driver(ArrayList<DirectoryField> directory,int GD) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.directory = directory;
        this.GD = GD;
    }
    
    
    
        
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jMenuItem1 = new javax.swing.JMenuItem();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jTextField6 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();

        jLabel3.setText("jLabel3");

        jTextField4.setText("jTextField4");

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Extendible Hashing Simulator");
        setForeground(java.awt.Color.gray);

        jButton1.setText("Exit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButton2.setText("Add key");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("Local Depth of last accessed bucket");

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("Hashed Value of key => Binary");

        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setText("Directory reference of last accessed bucket");

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setText("Contents of last accessed bucket");

        jTextField7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField7ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButton3.setText("Search key");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel7.setText("Current global depth");

        jTextField8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(228, 228, 228))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 23, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(97, 97, 97))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(23, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jTextField8, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTextField7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.exit(0);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // INSERT OPERATION
        
        int i,j,k,l,a,b,temp,overflow,hashValue;
        String ref = "",Hash = "";
        double partition;
        Bucket oldBuck,newBuck = new Bucket(GD);
        key = Integer.parseInt(jTextField1.getText());
        jTextField1.setText("");
        hashValue = key % 16;     // will hash all numbers to values from 0-15
        temp = hashValue;
        Hash = Integer.toString(temp) + " => ";
        int[] binary = new int[4];  //4 will be max global depth.
        for(i=0;i<4;i++)
                binary[i] = 0;
        for(i=0;i<4;i++)
        {
            binary[i] = hashValue % 2;
            hashValue /= 2;
        }
        for(i=3;i>=0;i--)
        {
            Hash = Hash + Integer.toString(binary[i]) + " ";
        }
        //The following block is to check the correctness of first 4 LSBs.
        
        System.out.println();
        for(i=0;i<4;i++)
        {
            System.out.print(binary[i]);
        }
        System.out.println();
        
        //------------------------------------------
        
        int flag,marker,checker,sign=0,prevLD,newLD;
        int tempO = 0,entry;
        int[] binaryO = new int[4];
        for(i=0;i<4;i++)
                binaryO[i] = 0;
        
        int check = 0;
        for(i=0;i<16;i++)
        {
            flag=0;
            for(j=0;j<4;j++)
            {
                if(directory.get(i).df[j] != binary[j])
                {
                    flag = 1;
                    break;
                }
            }
            if(flag == 0)
            {
                check = directory.get(i).b.LD;
                System.out.println("LD : " + check + " for key : " + key);
            }
        }
        for(i=0;i<16;i++)
        {
            flag = 0;
            overflow = 0;
            for(j=0;j<check;j++)
            {
                if(directory.get(i).df[j] != binary[j])
                {
                    flag = 1;
                    break;
                }
            }
            if(flag == 0)
            {
                overflow = directory.get(i).b.add(key);
                if(overflow == 1)
                {
                    prevLD = directory.get(i).b.LD;
                    System.out.println("LD for key :" + key + " is : " + prevLD);
                    oldBuck = directory.get(i).b;
                    if(prevLD==GD)
                    {
                        GD++;
                    }
                    
                        newLD = prevLD + 1;
                        partition = Math.pow(2,4-newLD);
                        for(k=0;k<16;k++)   //for introducing new buckets
                        {
                           
                           marker = 0;
                           checker = 0;
                           sign = 0;
                            for(l=0;l<prevLD;l++)
                            {
                                if(directory.get(k).df[l] != binary[l]) 
                                {
                                    checker = 1;
                                    break;
                                }
                                if(checker == 0) { 
                                    if(k % partition == 0)
                                    {
                                    newBuck = new Bucket(newLD);
                                    ref = "";
                                    sign = 1;
                                    for(a=0;a<oldBuck.records.size()+1;a++)
                                    {
                                        marker = 0;
                                        if(a==oldBuck.records.size())
                                            entry = key;
                                        else
                                            entry = oldBuck.records.get(a);
                                        tempO = entry;
                                        System.out.println("Entry being re-located from old bucket : " + tempO);
                                        for(b=0;b<4;b++)
                                        {
                                            binaryO[b] = tempO % 2;
                                            tempO /= 2;
                                        }
                                        for(b=0;b<newLD;b++)
                                        {
                                            if(directory.get(k).df[b] != binaryO[b])
                                            {
                                                marker = 1;
                                                break;
                                            }
                                        }
                                        if(marker == 0)
                                        {
                                            newBuck.add(entry);
                                           
                                               
                                                        //ref = Integer.toString(directory.get(b).df[0]) + "," +  Integer.toString(directory.get(b).df[0]) + "," + Integer.toString(directory.get(b).df[0]) + "," + Integer.toString(directory.get(b).df[0]);
                                            
                                        }
                                    }
                                }
                                directory.get(k).b = newBuck;
                                 if(sign == 1){
                                                    for(int p=0;p<newBuck.LD;p++){
                                                        ref = ref + Integer.toString(directory.get(k).df[p]) + ",";
                                                        System.out.println("REf :" + ref);
                                                    }
                                                    break;
                                                }
                                sign = 0;
                                }
                                
                            }
                        }
                        jTextField2.setText(" " + newBuck.contents());
                        jTextField5.setText(" " + Integer.toString(newBuck.LD));
                        jTextField7.setText(" " + ref + " Bits : " + Integer.toString(newBuck.LD));
                    }
                    else
                    {    
                        
                        jTextField2.setText(" " + directory.get(i).b.contents());
                        jTextField5.setText(" " + Integer.toString(directory.get(i).b.LD));
                        for(int p=0;p<directory.get(i).b.LD;p++)
                                                        ref = ref + Integer.toString(directory.get(i).df[p]) + ",";
                        //ref = Integer.toString(directory.get(i).df[0]) + "," +  Integer.toString(directory.get(i).df[0]) + "," + Integer.toString(directory.get(i).df[0]) + "," + Integer.toString(directory.get(i).df[0]);
                        jTextField7.setText(" " + ref + " Bits : " + directory.get(i).b.LD);
                    }
                jTextField3.setText(" " + Integer.toString(GD));
                jTextField8.setText(Hash);
                break;
            }
        }
               //check with next directory field.
        
        
        
        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jTextField7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField7ActionPerformed
        

    // TODO add your handling code here:
    }//GEN-LAST:event_jTextField7ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    // SEARCH OPERATION
    
    int i,j,k,p,blip=0,siren=0,temp;
    String r = "",Hash = "";
    int x = Integer.parseInt(jTextField6.getText());
    jTextField6.setText("");
    int hashedValue = x % 16;
    temp = hashedValue;
    Hash = Integer.toString(temp) + " => ";
    int[] bin = new int[4];  //4 will be max global depth.
    for(i=0;i<4;i++)
        bin[i] = 0;
    for(i=0;i<4;i++)
    {
            bin[i] = hashedValue % 2;
            hashedValue /= 2;
    }
    for(i=3;i>=0;i--)
        {
            Hash = Hash + Integer.toString(bin[i]) + " ";
        }
    for(i=0;i<16;i++)   //looping through directory fields
    {
        blip = 0;
        for(j=0;j<GD;j++)
        {
            if(directory.get(i).df[j] != bin[j])
            {
                blip = 1;
                break;
            }
        }
        if(blip == 0)
        {
           for(k=0;k<directory.get(i).b.records.size();k++)
           {
               if(directory.get(i).b.records.get(k) == x)
               {
                   JOptionPane.showMessageDialog(null,"Record found : " + x);
                   jTextField3.setText(" " + Integer.toString(GD));
                   jTextField8.setText(Hash);
                   jTextField2.setText(" " + directory.get(i).b.contents());
                   jTextField5.setText(" " + Integer.toString(directory.get(i).b.LD));
                   for(p=0;p<GD;p++)
                       r = r + Integer.toString(directory.get(i).df[p]) + ",";  
                   jTextField7.setText(" " + r + " Bits : " + directory.get(i).b.LD);
                   siren = 1;
                   break;
               }
           }
        }
        if(siren == 1)
            break;
    }
    if(siren == 0)
          JOptionPane.showMessageDialog(null,"Record not found"); 
// TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6ActionPerformed

    private void jTextField8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField8ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Driver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Driver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Driver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Driver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Driver(directory,GD).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    // End of variables declaration//GEN-END:variables
}
